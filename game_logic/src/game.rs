mod core;
mod factory;
mod game;
mod geometry;
mod map;
mod player;
mod probe;
mod random;

pub use self::core::*;
pub use self::factory::*;
pub use self::game::*;
pub use self::geometry::*;
pub use self::map::*;
pub use self::player::*;
pub use self::probe::*;

pub struct GameConfig {
    /// dimension of the map (unit: coord),
    pub dim: Coord,

    /// number of players in the game
    pub n_player: u32,

    /// money players start with
    pub initial_money: f64,

    /// initial number of probes to start with (must be smaller
    /// than `factory_max_probe`)
    pub initial_n_probes: u32,

    /// base income that each player receive unconditionally
    pub base_income: f64,

    /// minimal occupation value on tile required to build a building (factory/turret)
    pub building_occupation_min: u32,

    /// amount to pay to build a new factory
    pub factory_price: f64,

    /// maximal number of probe generated by a factory
    pub factory_max_probe: u32,

    /// delay to wait to build a probe from the factory (sec)
    pub factory_build_probe_delay: f64,

    /// maximal occupation value that can be reached
    pub max_occupation: u32,

    /// speed of the probe in coordinate/sec
    pub probe_speed: f64,

    /// amount to pay to produce one probe
    pub probe_price: f64,

    /// delay to wait claim a tile, the probe can be manually moved but not claim
    /// another tile during the delay (see Probe `is_claiming` flag for details)
    pub probe_claim_delay: f64,

    /// Costs of possessing one probe (computed in the player's income)
    pub probe_maintenance_costs: f64,

    /// amount to pay to build a new turret
    pub turret_price: f64,

    /// delay to wait for the turret between two fires (sec)
    pub turret_fire_delay: u32,

    /// scope of the turret (unit| coord)
    pub turret_scope: f64,

    /// Costs of possessing one turret (computed in the player's income)
    pub turret_maintenance_costs: f64,

    /// factor of how the occupation level of a tile reflects on its income,
    /// as `income = occupation * rate`
    pub income_rate: f64,

    /// probability that a tile with maximum occupation lose 1 occupation
    pub deprecate_rate: f64,
}
