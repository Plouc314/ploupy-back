from pydantic import BaseModel

from src.core import PointModel, ResponseModel

from src.game.entity.models import (
    TileModel,
    TileStateModel,
    FactoryModel,
    FactoryStateModel,
    ProbeModel,
    ProbeStateModel,
)


class MapModel(BaseModel):
    tiles: list[TileModel]


class MapStateModel(BaseModel):
    tiles: list[TileStateModel] = []


class PlayerModel(BaseModel):
    username: str
    money: int
    score: int
    factories: list[FactoryModel]
    probes: list[ProbeModel]


class PlayerStateModel(BaseModel):
    username: str
    money: int | None = None
    score: int | None = None
    factories: list[FactoryStateModel] = []
    probes: list[ProbeStateModel] = []


class GameConfig(BaseModel):
    dim: PointModel
    """dimension of the map (unit: coord)"""
    initial_money: int
    """money players start with"""
    factory_price: int
    """amount to pay to build a new factory"""
    factory_max_probe: int
    """maximal number of probe generated by a factory"""
    building_occupation_min: int
    """minimal occupation value on tile required on target tile"""
    max_occupation: int
    """maximal occupation value that can be reached"""
    probe_speed: float
    """speed of the probe in coordinate/sec"""
    probe_price: int
    """amount to pay to produce one probe"""
    income_rate: float
    """
    factor of how the occupation level of a tile reflects on its income,
    as `income = occupation * rate`
    """
    deprecate_rate: float
    """probability that a tile with maximum occupation lose 1 occupation"""


class GameModel(BaseModel):
    config: GameConfig
    map: MapModel
    players: list[PlayerModel]


class GameStateModel(BaseModel):
    map: MapStateModel | None = None
    players: list[PlayerStateModel] = []


class BuildFactoryResponse(ResponseModel):
    username: str
    money: int
    factory: FactoryModel


class BuildProbeResponse(ResponseModel):
    username: str
    money: int
    probe: ProbeModel
