/**
 * Schemas of the firebase realtime database
 */

/**
 * User's unique id, generated by the auth service
 */
type UID = string
/**
 * Id generated by the db service
 */
type ID = string

/**
 * Date and time, formatted as ISO 8601
 */
type DateTime = string

type int = number
type float = number

/**
 * Overall schema of the entire database
 * 
 * @path /
 */
type DB = {
    config: Config
    users: Record<UID, User>
    stats: Record<UID, UserStats>
    keys: Record<UID, UserKeys>
}

/**
 * Global configurations
 * 
 * @path /config
 */
type Config = {
    /**
     * Game modes
     */
    modes: Record<ID, GameMode>
}

/**
 * @path /config/modes/{id}
 */
type GameMode = {
    name: string
    config: GameConfig
}

/**
 * @path /users/{uid}
 */
type User = {
    username: string
    email: string
    avatar: string
    joined_on: DateTime
    last_online: DateTime
    owner: string | null
    bots: string[]
}

/**
 * Collection of statistics for all game modes
 * where the user played in
 * 
 * @path /stats/{uid}
 */
type UserStats = {
    /**
     * Current user MMR
     * ID: Config.modes.ID
     */
    mmrs: Record<ID, int>
    /**
     * History of the games per game mode
     * ID: Config.modes.ID
     */
    history: Record<ID, GameHistory>
}


/**
 * Collection of all played games statistics
 * indexed by datetime (for one game mode)
 * 
 * @path /stats/{uid}/history/{id}
 */
type GameHistory = Record<DateTime, GameStats>


/**
 * Statistics for one game
 * 
 * @path /stats/{uid}/history/{id}/{datetime}
 */
type GameStats = {
    /**
     * MMR of the user AFTER the game
     */
    mmr: int
    /**
     * List of UIDs of the player in the game (including self)
     * sorted by resulting position, i.e. best (index 0) to worst
     */
    ranking: UID[]
}

/**
 * Contains informations of keys for a user
 * 
 * @path /keys/{uid}
 */
type UserKeys = {
    /**
     * Key used to connect as a bot
     */
    bot_key: string
}

/**
 * Global configuration of the game
 * 
 * @path /config/modes/{id}/config
 */
type GameConfig = {
    initial_money: number
    initial_n_probes: number
    base_income: number
    building_occupation_min: number
    factory_price: number
    factory_max_probe: number
    factory_build_probe_delay: number
    max_occupation: number
    probe_speed: number
    probe_hp: number
    probe_price: number
    probe_claim_delay: number
    probe_claim_intensity: number
    probe_explosion_intensity: number
    probe_maintenance_costs: number
    turret_price: number
    turret_damage: number
    turret_fire_delay: number
    turret_scope: number
    turret_maintenance_costs: number
    income_rate: number
    deprecate_rate: number
    tech_probe_explosion_intensity_increase: number
    tech_probe_explosion_intensity_price: number
    tech_probe_claim_intensity_increase: number
    tech_probe_claim_intensity_price: number
    tech_probe_hp_increase: number
    tech_probe_hp_price: number
    tech_factory_build_delay_decrease: number
    tech_factory_build_delay_price: number
    tech_factory_probe_price_decrease: number
    tech_factory_probe_price_price: number
    tech_factory_max_probe_increase: int
    tech_factory_max_probe_price: number
    tech_turret_scope_increase: number
    tech_turret_scope_price: number
    tech_turret_fire_delay_decrease: number
    tech_turret_fire_delay_price: number
    tech_turret_maintenance_costs_decrease: number
    tech_turret_maintenance_costs_price: number
}