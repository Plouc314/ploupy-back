/**
 * Schemas of the firebase realtime database
 */

/**
 * User's unique id, generated by the auth service
 */
type UID = string
/**
 * Id generated by the db service
 */
type ID = string

type int = number
type float = number

/**
 * Overall schema of the entire database
 */
type DB = {
    config: Config
    users: Record<UID, User>
    stats: Record<UID, UserStats>
}

/**
 * Global configurations
 */
type Config = {
    /**
     * Game modes
     */
    modes: Record<ID, GameMode>
}

type GameMode = {
    name: string
    config: GameConfig
}

type User = {
    username: string
    email: string
    avatar: string
}

/**
 * Collection of statistics for (potentially) all game modes
 * ID: Config.modes.ID
 */
type UserStats = Record<ID, Stats>

/**
 * Statistics for one game mode
 */
type Stats = {
    /**
     * Ranking of the user for this game mode
     */
    mmr: int
    /**
     * List of occurence of the resulting position,
     * for ex the value at index 0 indicates the number
     * of times the user finished in first position
     */
    scores: int[]
}

/**
 * Global configuration of the game
 */
type GameConfig = {
    /** 
     * dimension of the map (unit: coord)
     */
    dim: { x: int, y: int }
    /**
     * number of players in the game
     */
    n_player: int
    /**
     * money players start with
     */
    initial_money: int
    /** 
     * initial number of probes to start with (must be smaller
     * than `factory_max_probe`) 
     */
    initial_n_probes: int
    /**
     * base income that each player receive unconditionally
     */
    base_income: float
    /**
     * minimal occupation value on tile required to build a building (factory/turret)
     */
    building_occupation_min: int
    /**
     * amount to pay to build a new factory
     */
    factory_price: int
    /**
     * maximal number of probe generated by a factory
     */
    factory_max_probe: int
    /**
     * delay to wait to build a probe from the factory (sec)
     */
    factory_build_probe_delay: float
    /**
     * maximal occupation value that can be reached
     */
    max_occupation: int
    /**
     * speed of the probe in coordinate/sec
     */
    probe_speed: float
    /**
     * amount to pay to produce one probe
     */
    probe_price: int
    /**
     * delay to wait claim a tile, the probe can be manually moved but not claim
     * another tile during the delay (see Probe `is_claiming` flag for details)
     */
    probe_claim_delay: float
    /**
     * Costs of possessing one probe (computed in the player's income)
     */
    probe_maintenance_costs: float
    /**
     * amount to pay to build a new turret
     */
    turret_price: int
    /**
     * delay to wait for the turret between two fires (sec)
     */
    turret_fire_delay: float
    /**
     * scope of the turret (unit| coord)
     */
    turret_scope: float
    /**
     * Costs of possessing one turret (computed in the player's income)
     */
    turret_maintenance_costs: float
    /**
     * factor of how the occupation level of a tile reflects on its income,
     * as `income = occupation * rate`
     */
    income_rate: float
    /**
     * probability that a tile with maximum occupation lose 1 occupation
     */
    deprecate_rate: float
}